---
import { render, getEntry } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import Sidebar from "../../components/Sidebar";
import { buildMenuTree } from "../../utils/helper.astro";
import { Breadcrumbs } from "astro-breadcrumbs";
import "astro-breadcrumbs/breadcrumbs.css";
import LHCFormsWidget from "../../components/lhc-forms-widget/lhc-forms-widget.astro";
import LHCFormsResponseWidget from "../../components/lhc-forms-widget/ihc-form-response-widget.astro";
import themeConfig from "../../../theme.config";
import SubmittedFormList from "../../components/lhc-forms-widget/submitted-form-list.astro";
import LatestCommit from "../../components/git-commit/latestCommit.astro";
import { getFiledatails } from "../lforms/service";
import { type FileDetails } from "../lforms/types";

const { contentCollectionSort } = themeConfig || {};
const files = import.meta.glob("/src/content/expectations/**/*.{md,mdx,json}", {
  eager: true,
});
const dirName = "expectations";

// Build the menu tree
//const menuTree = buildMenuTree(files, dirName);
const menuTree = buildMenuTree(files, dirName, contentCollectionSort, "desc");
function hasJsonOrYamlExtension(url: string): boolean {
  return /\.(json|ya?ml)(\?.*|#.*|$)/i.test(url);
}

const slug = Astro.params.slug;

let isLform = false;
if (hasJsonOrYamlExtension(`expectations/${slug}`)) {
  isLform = true;
}
const { searchParams } = Astro.url;

let entry;
let entryid;
let Content;
let headings;
let remarkPluginFrontmatter;
let fileName;
let currentTab;
let url;
let submittedForm;
let activeTabClass;
let inActiveTabClass;
let title;
let data: FileDetails[] | string;
const slugval = "/expectations/" + slug;
let folderPath = slugval.replace(/\/[^/]+$/, "").replace(/^\/+/, "");
if (isLform) {
  fileName = slugval.split("/").pop() || "";
  currentTab = searchParams.get("tab"); // Get 'tab' parameter
  url = Astro.url;
  submittedForm = searchParams.get("submitted-form");
  activeTabClass =
    " text-black border-b-2 border-black  active  dark:text-blue-500 dark:border-blue-500";
  inActiveTabClass =
    "hover:text-gray-600 hover:bg-gray-50 dark:hover:bg-gray-800 dark:hover:text-gray-300";
  title = fileName
    .replace(/\.lhc-form/, "")
    .replace(/\.(json|yml)$/, "")
    .replace(/[-_.]+/g, " ")
    .split(" ") // Split by hyphens or underscores
    .map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()) // Capitalize the first letter
    .join(" ");
  data = await getFiledatails(`${fileName}.lform-submittion.json`);
} else {
  entry = await getEntry("expectations", slug);
  entryid = entry?.id;
  if (!entry) {
    // Handle Error, for example:
    throw new Error("Could not find data");
  }
  ({ Content, headings, remarkPluginFrontmatter } = await render(entry));
}
---

<Layout>
  <main class="max-w-full mx-auto min-h-[70vh] grid grid-cols-12 gap-6 flex">
    <div
      class="col-span-12 md:col-span-4 lg:col-span-3 xl:col-span-2 bg-white dark:bg-gray-800 p-3 shadow-xs"
    >
      <div id="starlight__sidebar" class="sidebar-pane">
        <div class="sidebar-content">
          <div class="sidebar sl-flex sidebar-left-menu font-medium text-base">
            <Sidebar menuTree={menuTree} slugval={slugval} />
          </div>
        </div>
      </div>
    </div>
    <div
      class="col-span-12 md:col-span-8 lg:col-span-9 xl:col-span-10 pb-5 pt-0 md:pt-5 px-5 md:px-0 md:pr-5 dark:text-gray-300"
    >
      <Breadcrumbs
        linkTextFormat="capitalized"
        ariaLabel="Site navigation"
        separatorAriaHidden={false}
        customizeLinks={[
          { index: 2, "aria-disabled": true },
          { index: 3, "aria-disabled": true },
          { index: 4, "aria-disabled": true },
        ]}
      >
        <svg
          slot="separator"
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          ><polyline points="9 18 15 12 9 6"></polyline>
        </svg>
      </Breadcrumbs>
      {isLform ? ( <div>
            <div class="border-b border-slate-300 pb-3">
              <h1 class="text-2xl lg:text-4xl font-bold text-slate-700 mt-4 mb-1">
                {title}
              </h1>
            </div>
            <div
        class="text-sm font-medium text-center text-gray-500 border-b border-gray-200 dark:text-gray-400 dark:border-gray-700"
      >
      </div>

      <ul
        class="flex flex-wrap text-sm font-medium text-center text-gray-500 border-b border-gray-200 dark:border-gray-700 dark:text-gray-400"
      >
        <li class="me-2">
          <a
            href="?tab=form"
            aria-current="page"
            class=`inline-block p-4 rounded-t-lgc ${currentTab=='form' || currentTab == "" || currentTab == null ? activeTabClass: inActiveTabClass}`
          >
            Dashboard
          </a>
        </li>
        <li class="me-2">
          <a
            href="?tab=data"
            class=`inline-block p-4 rounded-t-lg ${currentTab=='data'? activeTabClass: inActiveTabClass}`
          >
            Submitted Entries
          </a>
        </li>
      </ul>
      {
        currentTab == "form" || currentTab == "" || currentTab == null ? (
          <div class="p-4">
           <LHCFormsWidget
              fileName={fileName}
              folderPath={folderPath}
            />
          </div>
        ) : (
          ""
        )
      }
      {
        currentTab == "data" ? (
          <>
            {submittedForm ? (
              <div class="flex flex-col">
                <div class=" float-right">
                  <a
                    href="?tab=data"
                    type="button"
                    class=" text-white float-right w-[80px] bg-cyan-700 hover:bg-cyan-800 focus:ring-4 focus:ring-cyan-300 font-medium rounded-lg text-sm px-5 py-2.5  dark:bg-cyan-600 dark:hover:bg-cyan-700 focus:outline-none dark:focus:ring-cyan-800"
                  >
                    Back
                  </a>
                </div>
                <LHCFormsResponseWidget fileName={submittedForm} />
              </div>
            ) : <SubmittedFormList fileName={`${fileName}.lform-submittion.json`} />}
          </>
        ) : (
          ""
        )
      }

            
          </div>) :( <article class="prose max-w-screen-xl withbullet markdown-content">
        <div class="flex justify-end text-sm">
          <LatestCommit filename={entryid} pageTitle={entry?.data.title} />
        </div>
        <Content />
      </article>) }
     
    </div>
  </main>
</Layout>
