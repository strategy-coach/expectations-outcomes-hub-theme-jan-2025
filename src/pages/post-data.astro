---
import ServerDataService from "../../support/services/serverDataService";

const token = Astro.cookies.get("zitadel_access_token");
const userID = Astro.cookies.get("userId")?.value
  ? Astro.cookies.get("userId")?.value
  : 0;
const tenantId = Astro.cookies.get("zitadel_tenant_id")?.value
  ? (Astro.cookies.get("zitadel_tenant_id")?.value as string)
  : ("" as string);


if (Astro.request.body && token) {
  const data = await Astro.request.json();
  try {
    const {
      reactionTypeId,
      type,
      description,
      source,
      url,
      userId,
      logId,
      parentId,
      parentMessageId,
      activityType,
      logMessage,
      platform,
      messageId,
      updatedBy,
      timeStamp,
    } = data;
    console.log(parentMessageId);
    switch (type) {
      case "addComment":
        await ServerDataService.addComment({
          userId,
          platform,
          activityType,
          parentId,
          description,
          url,
        });
        break;
      case "addMessageReaction":
        await ServerDataService.addMessageReaction(
          userID ? userID : "",
          messageId,
          reactionTypeId
        );
        break;
      case "deleteComment":
        await ServerDataService.deleteComment(messageId);
        await ServerDataService.addActivityLog({
          messageId: parentMessageId,
          userId,
          updatedBy,
          activityType,
          source,
          tenantId,
          description,
          url,
          timeStamp,
        });
        break;
      case "editLog":
        await ServerDataService.editComment(logId, description);
        await ServerDataService.addActivityLog({
          userId,
          activityType,
          messageId: logId,
          source,
          tenantId,
          description: logMessage,
          url,
        });
        break;

      default:
        break;
    }
  } catch (error) {
    console.error("Error occurred while processing data:", error);
  }
}
---
