---
export function extractTitle(frontmatter) {
  // Check if frontmatter has a title property
  return frontmatter?.title || null; // Return the title if found
}

export function formatName(name) {
  return name
    .split(/[-_]/) // Split by hyphens or underscores
    .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()) // Capitalize the first letter
    .join(' '); // Join words with spaces
}

export function buildMenuTree(files, dirName) {
  const tree = [];

  for (const path in files) {
    const parts = path.replace(`/src/content/${dirName}/`, '').split('/'); // Remove base path and split by "/"
    let currentLevel = tree;

    parts.forEach((part, index) => {
      const isFile = index === parts.length - 1;

      if (isFile) {
        // Access the frontmatter from the file module
        const fileModule = files[path];
        const frontmatter = fileModule?.frontmatter || {};
        const title =
          extractTitle(frontmatter) || formatName(part.replace('.md', '').replace('.mdx', '')); // Use title or formatted file name

        // Remove file extension from the path
        const filePath = `${path.replace('/src/content', '').replace('.md', '').replace('.mdx', '')}`;

        currentLevel.push({
          name: title, // Use extracted title or formatted name
          path: filePath, // File path without extension
          isFile: true,
        });
      } else {
        // Format folder name
        const formattedName = formatName(part);
        let folder = currentLevel.find(item => item.name === formattedName);

        if (!folder) {
          folder = {
            name: formattedName, // Use formatted folder name
            path: `${path.replace('/src/content', '')}`,
            isFile: false,
            children: [],
          };
          currentLevel.push(folder);
        }

        // Move to the children of the current folder for the next iteration
        currentLevel = folder.children;
      }
    });
  }

  return tree;
}


---