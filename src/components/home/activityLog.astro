---
import { z } from 'zod';
import moment from 'moment';

// Define schema for activity log entries
const ActivityLogSchema = z.object({
  hits: z.array(
    z.object({
      _timestamp: z.number(),
      details: z.string(),
      duration: z.number(),
      email: z.string(),
      end_time: z.number(),
      operation_name: z.string(),
      organizationname: z.string().optional(),
      pagetitle: z.string(),
      service_name: z.string(),
      start_time: z.number(),
      timestamp: z.string(),
      title: z.string(),
      trace_id: z.string(),
      url: z.string(),
      username: z.string(),
    })
  ),
  total: z.number(),
});

// Extract Astro props
const { recordsLimit, showViewMoreButton, hoursToFetch } = Astro.props;

// Environment variables
const ORGANIZATION_ID = import.meta.env.PUBLIC_ZITADEL_ORGANIZATION_ID;
const OBSERVE_API_URL = import.meta.env.PUBLIC_OPENOBSERVE_URL;
const OBSERVE_API_TOKEN = import.meta.env.PUBLIC_OPENOBSERVE_TOKEN;

// SQL query for fetching activity log data
const activityLogQuery = `SELECT * FROM default WHERE organizationid='${ORGANIZATION_ID}' 
  AND (operation_name='element-click' OR operation_name='documentLoad')`;

// Define time range for data retrieval
const currentTimeMicroseconds = Date.now() * 1000; 
const startTimeMicroseconds = currentTimeMicroseconds - (hoursToFetch * 3600 * 1000000);

// Fetch activity log data from API
const response = await fetch(`${OBSERVE_API_URL}api/default/_search?type=traces`, {
  method: 'POST',
  headers: {
    'Authorization': `Basic ${btoa(OBSERVE_API_TOKEN)}`,
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({
    query: {
      sql: `${btoa(activityLogQuery)}`,
      start_time: startTimeMicroseconds,
      end_time: currentTimeMicroseconds,
      from: 0,
      size: recordsLimit,
    },
    encoding: 'base64',
  }),
});

// Parse response data
const responseData = await response.json();
const parsedActivityData = ActivityLogSchema.safeParse(responseData);

const activityLogEntries = parsedActivityData.success ? parsedActivityData.data.hits : [];
const totalActivityRecords = parsedActivityData.success ? parsedActivityData.data.total : 0;

// Function to parse and format activity details
function getActivityDescription(details: string) {
  try {
    const parsedDetails = JSON.parse(details);
    return parsedDetails.title ? `clicked on '${parsedDetails.title}'` : `performed an action`;
  } catch {
    return `performed an action`;
  }
}

const getIconAndColor = (operation_name: string) => {
  if (operation_name === 'element-click') {
    return {
      icon: `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
        <path stroke-linecap="round" stroke-linejoin="round" d="M12 4v16m-4-4l4 4m4-4l-4 4m-4-12l4-4m4 4l-4-4"/>
      </svg>`,
      color: "bg-emerald-500"
    };
  } else {
    return {
      icon: `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5">
        <path stroke-linecap="round" stroke-linejoin="round" d="M3 5h18M3 12h18m-9 7h9"/>
      </svg>`,
      color: "bg-blue-500"
    };
  }
};

const getActivityMessage = (log: { _timestamp: number; details: string; duration: number; email: string; end_time: number; operation_name: string; pagetitle: string; service_name: string; start_time: number; timestamp: string; title: string; trace_id: string; url: string; username: string; organizationname?: string | undefined; }) => {
  if (log.operation_name === 'element-click') {
    return `${log.username} ${getActivityDescription(log.details)} on <strong>${log.pagetitle}</strong> page`;
  } else {
    return `${log.username} viewed the <strong>${log.pagetitle}</strong> page`;
  }
};

// Function to format timestamp
const getRelativeTime = (timestamp: string) => moment(Number(timestamp)).fromNow();
---

<div class="lg:col-span-6 bg-white dark:bg-gray-800 shadow rounded-lg p-4">
  <h3 class="text-lg font-semibold text-slate-700 dark:text-gray-300">
    <div class="flex gap-2 items-center text-xl justify-between">
      <div class="flex gap-2 items-center">
        <img src="/assets/images/fi-rr-calendar.svg" class="w-6 h-6" alt="Calendar Icon" />
        <span>Activity Log</span>
      </div>
      {showViewMoreButton && (
        <div>
          <a href="/activity">
            <button
              type="button"
              class="rounded-md bg-white/10 px-2.5 py-1.5 text-sm font-semibold text-[#028db7] shadow-sm hover:bg-white/20 hover:text-black dark:hover:text-white"
            >
              View More
            </button>
          </a>
        </div>
      )}
    </div>
  </h3>

  {totalActivityRecords > 0 ? (
   <ul role="feed" class="relative flex flex-col gap-6 py-6 pl-8 before:absolute before:top-0 before:left-8 before:h-full before:border before:-translate-x-1/2 before:border-slate-200 before:border-dashed after:absolute after:top-6 after:left-8 after:bottom-6 after:border after:-translate-x-1/2 after:border-slate-200">
    {activityLogEntries.map((log) => {
      const { icon, color } = getIconAndColor(log.operation_name);
      return (
        <li role="article" class="relative pl-8">
          <span class={`absolute left-0 z-10 flex items-center justify-center w-8 h-8 text-white -translate-x-1/2 rounded-full ring-2 ring-white ${color}`} set:html={icon}></span>
          <div class="flex flex-col flex-1 gap-0">
            <h4 class="text-sm font-medium text-slate-700" set:html={getActivityMessage(log)}></h4>
            <p class="text-xs text-slate-500">{getRelativeTime(log.timestamp)}</p>
          </div>
        </li>
      );
    })}
    </ul>
  ) : (
    <p class="text-gray-600">No activity log available.</p>
  )}
</div>
