---
import sqlite3 from "sqlite3";
import path from "path";
import fs from "fs";
import pkg from "he";
const { decode } = pkg;

import DataTables from "./dataTable";
import DataList from "./jsonList";
import CardList from "./dataCard";

const { title, layout, dbName, table, fields, where, orderBy, limit } =
  Astro.props;

// Function to fetch data from the database
const children = Astro.slots.has("default")
  ? String(await Astro.slots.render("default"))
  : "";
const query1 = decode(children);

const dbPath = path.resolve(process.cwd(), dbName);

// Check if layout is 'card' and fields is an array without 'title'
if (
  layout === "card" &&
  !fields.some((field: string | string[]) => field.includes("title"))
) {
  throw new Error(
    "When layout is 'card', the 'title' field must be included in the fields array."
  );
}

let query;
if (Array.isArray(fields) && fields.length > 0) {
  query = `SELECT ${fields.join(", ")} FROM ${table}`;
} else {
  throw new Error("Invalid 'fields' parameter. It must be an array or '*'.");
}

if (where) {
  query += ` WHERE ${where}`;
}

if (orderBy) {
  query += ` ORDER BY ${orderBy}`;
}

if (limit) {
  query += ` LIMIT ${limit}`;
}

// Check if database exists
if (!fs.existsSync(dbPath)) {
  throw new Error(`Database file not found: ${dbPath}`);
}

// Function to fetch data only if DB exists
const getData = async (
  query: string
): Promise<Array<Record<string, any>> | string> => {
  return new Promise((resolve, reject) => {
    if (!fs.existsSync(dbPath)) {
      resolve("Database not found. Please check the database name.");
      return;
    }

    const db = new sqlite3.Database(dbPath);
    db.all(query, [], (err, rows) => {
      db.close();
      if (err) {
        resolve(`Error executing query: ${err.message}`);
      } else {
        resolve(rows as Record<string, any>[]);
      }
    });
  });
};

const data = await getData(query);
---

<h2>{title}</h2>
{
  typeof data === "string" ? (
    <p>{data}</p> // Show error messages in the component
  ) : layout === "table" ? (
    <DataTables client:only="react" data={data} />
  ) : layout === "json" ? (
    <DataList client:only="react" data={data} />
  ) : layout === "card" ? (
    <CardList client:only="react" data={data} />
  ) : (
    <p>No layout provided. Please specify a layout type.</p>
  )
}
