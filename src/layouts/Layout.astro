---
import Header from "./Header.astro";
import Footer from "./Footer.astro";
import themeConfig from "../../theme.config";

interface Props {
  title: string;
  enableEditButton?: boolean;
  enableMermaid?: boolean;
}

const { title } = Astro.props;
const { baseHyperLinkColor } = themeConfig || {};
const { enableEditButton } = Astro.props;

const enableOpenObserve =
  import.meta.env.ENABLE_OPEN_OBSERVE !== undefined
    ? import.meta.env.ENABLE_OPEN_OBSERVE
    : false;
    let user: string;
if (Astro.cookies.get("User")?.value !== undefined) {
  user = Astro.cookies.get("User")!.value; // Using non-null assertion operator (!)
} else {
  user = "Unauth";
}
const userName = Astro.cookies.get("zitadel_user_name");
const userEmail = Astro.cookies.get("zitadel_user_email");
const envData = {
  GITHUB_PAT: import.meta.env.PUBLIC_GITHUB_PAT as string,
  GITHUB_OWNER: import.meta.env.PUBLIC_GITHUB_OWNER as string,
  GITHUB_REPO: import.meta.env.PUBLIC_GITHUB_REPO as string,
  NOVU_API_URL: import.meta.env.PUBLIC_NOVU_API_URL as string,
  NOVU_API_KEY: import.meta.env.PUBLIC_NOVU_API_KEY as string,
  CONTACTUS_ADMIN_EMAIL: import.meta.env.PUBLIC_NOVU_CONTACTUS_ADMIN_EMAIL as string,
  NOVU_CONTACTUS_TEMPLATE: import.meta.env
    .PUBLIC_NOVU_CONTACTUS_TEMPLATE as string,
    NOVU_CONTACT_ADMIN_TEMPLATE: import.meta.env
    .PUBLIC_NOVU_ADMIN_TEMPLATE as string,
  NOVU_SUBSCRIBER_ID: import.meta.env.PUBLIC_NOVU_SUBSCRIBER_ID as string,
  GOOGLE_CAPTCHA_SITE_KEY: import.meta.env.GOOGLE_CAPTCHA_SITE_KEY as string,
};
const enableSupportAndFeedback =
  import.meta.env.ENABLE_SUPPORT_AND_FEEDBACK !== undefined
    ? import.meta.env.ENABLE_SUPPORT_AND_FEEDBACK
    : false;
const { enableMermaid } = Astro.props;

---

<!doctype html>
<html lang="en" style={`--hyperlink-color: ${baseHyperLinkColor || "#007BFF"}`}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/assets/images/favicon.svg" />
    <link rel="stylesheet" href="/assets/styles/tailwind.min.css" />
    <link rel="stylesheet" href="/assets/styles/basic.css" />
    <link rel="stylesheet" href="/assets/styles/custom.css" />

    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/flowbite/2.0.0/flowbite.min.css"
      rel="stylesheet"
    />
    <link href="/htmloutput/pagefind/pagefind-ui.css" rel="stylesheet" />
    <link
      rel="stylesheet"
      href="/assets/css/support-and-feedback/support-and-feedback.css"
    />
    <script src="/htmloutput/pagefind/pagefind-ui.js" is:inline></script>
    <script
      src="https://cdn.jsdelivr.net/npm/flowbite@2.5.2/dist/flowbite.min.js"
    ></script>
    <script
      type="module"
      crossorigin="anonymous"
      src="https://lhcforms-static.nlm.nih.gov/lforms-versions/36.8.0/webcomponent/assets/lib/zone.min.js"
    ></script>
    <script
      type="module"
      crossorigin="anonymous"
      src="https://lhcforms-static.nlm.nih.gov/lforms-versions/36.8.0/webcomponent/lhc-forms.js"
    ></script>
    <script
      type="module"
      crossorigin="anonymous"
      src="https://lhcforms-static.nlm.nih.gov/lforms-versions/36.8.0/fhir/R4/lformsFHIR.min.js"
    ></script>

    {enableMermaid && (
      <script type="module">
        import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs';
      </script>
    )}
   
    <link
    rel="stylesheet"
    href="https://cdn.jsdelivr.net/npm/ag-grid-community/styles/ag-grid.css"
  />

  <link
    rel="stylesheet"
    href="https://cdn.jsdelivr.net/npm/ag-grid-community/styles/ag-theme-alpine.css"
  />
  <link
    rel="stylesheet"
    href="https://cdn.jsdelivr.net/npm/ag-grid-community/styles/ag-theme-material.css"
  />
  
  <script
    src="https://cdn.jsdelivr.net/npm/ag-grid-community/dist/ag-grid-community.min.noStyle.js"
  ></script>
    <script
      src="https://cdn.jsdelivr.net/npm/flowbite@2.5.2/dist/flowbite.min.js"
      type="module"
      crossorigin="anonymous"></script>

    {
      enableOpenObserve == "true" && (
        <>
          <script
            type="module"
            crossorigin="anonymous"
            src="/assets/scripts/index.28871fbc.js"
          />
          <link rel="modulepreload" href="/assets/scripts/vendor.4c9b4c60.js" />
        </>
      )
    }
<script is:inline>
  // Apply dark mode before rendering to prevent the white flash
  (function () {
    if (localStorage.getItem('theme') === 'dark') {
      document.documentElement.classList.add('dark');
    }
  })();
</script>
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body class="bg-gray-50 dark:bg-gray-900 dark:text-white">
    <Header />
    <script define:vars={{ userName, userEmail, envData }} is:inline>
      window.widgetConfig = {
        GITHUB_OWNER: envData.GITHUB_OWNER,
        GITHUB_REPO: envData.GITHUB_REPO,
        GITHUB_PAT: envData.GITHUB_PAT,
        USER_EMAIL: userEmail ? userEmail.value : "Unauth",
        USER_FULL_NAME: userName ? userName.value : "Unauth",
        NOVU_API_URL: envData.NOVU_API_URL,
        NOVU_API_KEY: envData.NOVU_API_KEY,
        NOVU_SUBSCRIBER_ID: envData.NOVU_SUBSCRIBER_ID,
        NOVU_CONTACTUS_TEMPLATE: envData.NOVU_CONTACTUS_TEMPLATE,
        NOVU_CONTACT_ADMIN_TEMPLATE: envData.NOVU_CONTACT_ADMIN_TEMPLATE,
        CONTACTUS_ADMIN_EMAIL: envData.CONTACTUS_ADMIN_EMAIL,
        GOOGLE_CAPTCHA_SITE_KEY: envData.GOOGLE_CAPTCHA_SITE_KEY,
      };
    </script>
    {
      enableSupportAndFeedback == "true" && (
      <script src="/assets/js/support-and-feedback.js" is:inline></script>
      )
    }
    
    <script is:inline>
      document.addEventListener('DOMContentLoaded', () => {
        const themeToggle = document.getElementById('toggle-theme');
        const htmlElement = document.documentElement;
  
        themeToggle?.addEventListener('click', () => {
          htmlElement.classList.toggle('dark');
          const newTheme = htmlElement.classList.contains('dark') ? 'dark' : 'light';
          localStorage.setItem('theme', newTheme);
        });
      });
    </script>
    
    <slot />
    <Footer enableEditButton={enableEditButton} />
  </body>
</html>
<script is:inline>
  document.addEventListener("DOMContentLoaded", function () {
    function removeHtmlExtensionAndFolder(href) {
      return href.replace(/\/htmloutput\//, "/").replace(/\.html$/, "");
    }

    // Function to apply URL modification to links
    function updateLinks() {
      const resultLinks = document.querySelectorAll(
        ".pagefind-ui__result-link"
      );
      resultLinks.forEach((link) => {
        const originalHref = link.getAttribute("href");
        if (originalHref) {
          const newHref = removeHtmlExtensionAndFolder(originalHref);
          link.href = newHref;
        }
      });

      // Remove the class `pagefind-ui__result-thumb` from elements
      const thumbElements = document.querySelectorAll(
        ".pagefind-ui__result-thumb"
      );
      thumbElements.forEach((element) => {
        element.classList.remove("pagefind-ui__result-thumb");
      });
    }
   
      // Event delegation: Run only when search input is clicked
  document.addEventListener("click", function (event) {
    if (event.target.matches(".pagefind-ui__search-input")) {
      // Add keyup event listeners only after search input is clicked
      window.addEventListener("keydown", function () {
      setTimeout(updateLinks, 1500);
    });
    window.addEventListener("keyup", function () {
      setTimeout(updateLinks, 500);
    });

    window.addEventListener("click", function () {
      setTimeout(updateLinks, 500);
    });
    }
  });
    
    // Add a click event listener to handle "Load more Results" button
  });

  
</script>

<style is:global>
  main a {
    color: var(--hyperlink-color, #007bff);
    text-decoration: none;
  }
  main a:hover {
    color: #000 !important;
    text-decoration: none;
  }
</style>
